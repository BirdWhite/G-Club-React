// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  NONE
  USER
  ADMIN
  SUPER_ADMIN
}

model User {
  id              String            @id @default(cuid())
  name            String?
  image           String?
  role            UserRole          @default(NONE)
  profile         Profile?
  posts           Post[]
  comments        Comment[]
  
  // 게임 메이트 모집 관련 관계
  gamePosts       GamePost[]
  gameComments    GameComment[]
  gameParticipations GameParticipant[]
  createdAt       DateTime      @default(now())
}

model Profile {
  id            String    @id @default(cuid())
  userId        String    @unique
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  fullName      String
  birthDate     DateTime
  profileImage  String    @default("/images/default-profile.png")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model GlobalPermissionConfig {
  id        Int      @id @default(1)
  json      Json     // 글로벌 권한 설정 (기존 RolePermissionConfig와 동일한 구조)
  updatedAt DateTime @updatedAt
}

model Board {
  id          String   @id @default(cuid())
  name        String   // 게시판 이름
  slug        String   @unique // URL 식별자 (예: notice, free)
  description String?  // 게시판 설명
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  posts       Post[]
}

model BoardPermissionConfig {
  id        Int      @id @default(1)
  json      Json     // 게시판별 권한 설정
  updatedAt DateTime @updatedAt
}

model Post {
  id        String    @id @default(cuid())
  title     String
  content   String
  published Boolean   @default(false)
  boardId   String
  board     Board     @relation(fields: [boardId], references: [id], onDelete: Cascade)
  authorId  String
  author    User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  comments  Comment[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  postId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  authorId  String
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// 게임 정보
model Game {
  id          String     @id @default(cuid())
  name        String     @unique // 게임 이름 (예: 리그 오브 레전드, 배틀그라운드 등)
  aliases     String[]   // 게임 별칭들 (예: ["롤", "리오레", "LOL"])
  description String?    // 게임 설명 (선택사항)
  iconUrl     String?    // 게임 아이콘 URL (선택사항)
  posts       GamePost[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

enum GamePostStatus {
  OPEN       // 모집 중
  FULL       // 정원 마감
  COMPLETED  // 완료됨
}

// 게임 메이트 모집글
model GamePost {
  id          String           @id @default(cuid())
  title       String           // 제목
  content     String           // 내용
  gameId      String           // 게임 ID
  game        Game             @relation(fields: [gameId], references: [id], onDelete: Cascade)
  authorId    String           // 작성자 ID
  author      User             @relation(fields: [authorId], references: [id], onDelete: Cascade)
  maxPlayers  Int              // 최대 인원수
  startTime   DateTime         // 게임 시작 예정 시간
  status      GamePostStatus   @default(OPEN)  // 모집 상태 (OPEN, FULL, COMPLETED)
  participants GameParticipant[] // 참여자 목록
  comments    GameComment[]    // 댓글
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
}

// 게임 참여자
model GameParticipant {
  id          String   @id @default(cuid())
  gamePostId  String   // 게시글 ID
  gamePost    GamePost @relation(fields: [gamePostId], references: [id], onDelete: Cascade)
  userId      String   // 사용자 ID
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  isLeader    Boolean  @default(false) // 방장 여부
  isReserve   Boolean  @default(false) // 예비 참여자 여부
  joinedAt    DateTime @default(now())
  
  @@unique([gamePostId, userId])
}

// 게임 모집글 댓글
model GameComment {
  id          String   @id @default(cuid())
  content     String   // 댓글 내용
  gamePostId  String   // 게시글 ID
  gamePost    GamePost @relation(fields: [gamePostId], references: [id], onDelete: Cascade)
  authorId    String   // 작성자 ID
  author      User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
