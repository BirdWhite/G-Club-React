// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  NONE
  USER
  ADMIN
  SUPER_ADMIN
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  image         String?
  role          UserRole  @default(NONE)
  profile       Profile?
  posts         Post[]
  comments      Comment[]
}

model Profile {
  id            String    @id @default(cuid())
  userId        String    @unique
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  fullName      String
  birthDate     DateTime
  profileImage  String    @default("/images/default-profile.png")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model GlobalPermissionConfig {
  id        Int      @id @default(1)
  json      Json     // 글로벌 권한 설정 (기존 RolePermissionConfig와 동일한 구조)
  updatedAt DateTime @updatedAt
}

model Board {
  id          String   @id @default(cuid())
  name        String   // 게시판 이름
  slug        String   @unique // URL 식별자 (예: notice, free)
  description String?  // 게시판 설명
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  posts       Post[]
}

model BoardPermissionConfig {
  id        Int      @id @default(1)
  json      Json     // 게시판별 권한 설정
  updatedAt DateTime @updatedAt
}

model Post {
  id        String    @id @default(cuid())
  title     String
  content   String
  published Boolean   @default(false)
  boardId   String
  board     Board     @relation(fields: [boardId], references: [id], onDelete: Cascade)
  authorId  String
  author    User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  comments  Comment[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  postId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  authorId  String
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
