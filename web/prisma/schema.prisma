generator client {
  provider   = "prisma-client-js"
  engineType = "library"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ========== Enums ==========
// 권한 타입
enum PermissionType {
  // 게시물 관련
  POST_CREATE
  POST_READ
  POST_UPDATE
  POST_DELETE
  POST_MANAGE_ALL
  
  // 사용자 관련
  USER_VIEW
  USER_MANAGE
  USER_ROLE_MANAGE
  
  // 채팅 관련
  CHAT_CREATE
  CHAT_DELETE
  CHAT_MANAGE
  
  // 게임 관련
  GAME_CREATE
  GAME_UPDATE
  GAME_DELETE
  GAME_MANAGE
  
  // 관리자
  ADMIN_PANEL_ACCESS
  SYSTEM_SETTINGS
}

enum ChatRoomType {
  GAME       // 게임 채팅방
}

enum GamePostStatus {
  OPEN // 모집 중
  FULL // 인원 마감
  IN_PROGRESS // 게임 진행 중
  COMPLETED // 모집 완료 및 게임 종료
  EXPIRED // 만료됨
  DELETED // 삭제됨
}

enum ParticipantType {
  MEMBER // 확정 멤버
  GUEST // 게스트 (커스텀 입력)
}

enum WaitingStatus {
  WAITING // 대기 중
  CONFIRMED // 참여 확정
  CANCELED // 대기 취소
}

// ========== Models ==========

// 권한 모델
model Permission {
  id          String    @id @default(cuid())
  name        String    @unique
  description String?
  roles       Role[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

// 역할 모델
model Role {
  id            String         @id @default(cuid())
  name          String         @unique
  description   String?
  isDefault     Boolean        @default(false)
  permissions   Permission[]
  userProfiles  UserProfile[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

// 사용자 프로필 모델 (Supabase Auth와 연동)
model UserProfile {
  id                 String               @id @default(cuid())
  userId             String               @unique
  name               String
  email              String?              // OAuth 이메일 정보
  birthDate          DateTime
  image              String?
  roleId             String?
  role               Role?                @relation(fields: [roleId], references: [id])
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt

  
  // 게임 관련
  gameParticipations GameParticipant[]     @relation("UserProfileGameParticipations")
  gamePosts          GamePost[]            @relation("UserProfileGamePosts")
  waitingList        WaitingParticipant[]  @relation("UserWaitingList")
  
  // 채팅 관련
  chatMessages       ChatMessage[]         @relation("UserProfileChatMessages")
  chatRooms          ChatParticipant[]     @relation("UserProfileChatRooms")
  
  // 푸시 알림 관련
  pushSubscriptions  PushSubscription[]    @relation("UserProfilePushSubscriptions")
  
  // 좋아하는 게임 관련
  favoriteGames      UserFavoriteGame[]    @relation("UserFavoriteGames")
  
  // 알림 관련
  sentNotifications     Notification[]        @relation("SentNotifications")
  receivedNotifications Notification[]        @relation("ReceivedNotifications")
  notificationReceipts  NotificationReceipt[] @relation("NotificationReceipts")
  notificationSettings NotificationSetting?  @relation("UserNotificationSettings")
}



// 채팅 관련 모델
model ChatRoom {
  id           String        @id @default(cuid())
  type         ChatRoomType  @default(GAME)
  name         String
  description  String?
  isActive     Boolean       @default(true)
  maxMembers   Int?          // 최대 참여자 수 (null이면 제한 없음)
  
  // 채팅방 소유자 (게임 포스트)
  gamePostId   String?       @unique  // 게임 포스트에 속한 경우
  gamePost     GamePost?     @relation(fields: [gamePostId], references: [id], onDelete: Cascade)
  
  // 메시지 및 참여자
  messages     ChatMessage[]
  participants ChatParticipant[]
  
  // 메타데이터
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  
  @@index([type])
}

model ChatParticipant {
  id          String   @id @default(cuid())
  chatRoom    ChatRoom @relation(fields: [chatRoomId], references: [id], onDelete: Cascade)
  chatRoomId  String
  user        UserProfile     @relation("UserProfileChatRooms", fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  joinedAt    DateTime @default(now())
  lastReadAt  DateTime @default(now())  // 마지막으로 읽은 시간
  isMuted     Boolean  @default(false)  // 음소거 여부
  
  @@unique([chatRoomId, userId])
  @@index([userId])
}

model ChatMessage {
  id           String    @id @default(cuid())
  content      String
  chatRoom     ChatRoom  @relation(fields: [chatRoomId], references: [id], onDelete: Cascade)
  chatRoomId   String
  user         UserProfile      @relation("UserProfileChatMessages", fields: [userId], references: [id], onDelete: Cascade)
  userId       String
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  
  @@index([chatRoomId])
  @@index([userId])
}

// 게임 메이트 관련 모델
model Game {
  id          String        @id @default(cuid())
  name        String        @unique
  description String?
  iconUrl     String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  aliases     String[]
  gamePosts   GamePost[]
  
  // 좋아하는 게임 관련
  favoritedBy UserFavoriteGame[]    @relation("GameFavorites")
}

model GamePost {
  id            String   @id @default(cuid())
  authorId      String
  author        UserProfile @relation("UserProfileGamePosts", fields: [authorId], references: [userId])
  
  title         String
  content       Json
  
  // 게임 정보
  gameId        String?
  game          Game?    @relation(fields: [gameId], references: [id])
  customGameName String? // DB에 없는 게임일 경우

  startTime     DateTime // 게임 시작 시간
  maxParticipants Int      // 최대 인원
  
  status        GamePostStatus @default(OPEN)
  
  participants      GameParticipant[]
  waitingList       WaitingParticipant[]
  chatRoom          ChatRoom?
  
  // 알림 관련
  notifications     Notification[]    @relation("GamePostNotifications")

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([authorId])
  @@index([status, createdAt])
  @@index([status, startTime])
}

model GameParticipant {
  id              String   @id @default(cuid())
  gamePostId      String
  gamePost        GamePost @relation(fields: [gamePostId], references: [id], onDelete: Cascade)
  
  participantType ParticipantType @default(MEMBER)

  // DB에 있는 유저
  userId          String?
  user            UserProfile? @relation("UserProfileGameParticipations", fields: [userId], references: [userId])
  
  // 커스텀 입력 유저
  guestName       String?

  joinedAt        DateTime @default(now())

  @@unique([gamePostId, userId])
  @@unique([gamePostId, guestName])
  @@index([gamePostId])
  @@index([userId])
}

model WaitingParticipant {
  id              String   @id @default(cuid())
  gamePostId      String
  gamePost        GamePost @relation(fields: [gamePostId], references: [id], onDelete: Cascade)

  userId          String
  user            UserProfile @relation("UserWaitingList", fields: [userId], references: [userId])
  
  status          WaitingStatus @default(WAITING)

  // 참여 가능 시간
  availableTime   String? // "자리 발생 시 즉시 참여" 또는 특정 시간 문자열

  requestedAt     DateTime @default(now()) // 대기 신청 시간 (순서 결정을 위해)

  @@unique([gamePostId, userId])
  @@index([gamePostId, requestedAt])
}

// 푸시 알림 구독 정보
model PushSubscription {
  id          String      @id @default(cuid())
  userId      String      @unique
  user        UserProfile @relation("UserProfilePushSubscriptions", fields: [userId], references: [userId], onDelete: Cascade)
  
  // Web Push 구독 정보
  endpoint    String      @unique
  p256dh      String      // 공개 키
  auth        String      // 인증 키
  
  // 알림 설정
  isEnabled   Boolean     @default(true)
  
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  
  @@index([userId])
  @@index([endpoint])
}

// 사용자 좋아하는 게임
model UserFavoriteGame {
  id        String      @id @default(cuid())
  userId    String
  gameId    String
  user      UserProfile @relation("UserFavoriteGames", fields: [userId], references: [userId], onDelete: Cascade)
  game      Game        @relation("GameFavorites", fields: [gameId], references: [id], onDelete: Cascade)
  addedAt   DateTime    @default(now())
  order     Int?        // 사용자가 설정한 순서 (선택사항)
  
  @@unique([userId, gameId])
  @@index([userId])
  @@index([gameId])
}

// 알림 템플릿 (재사용 가능한 알림 타입 정의)
model NotificationTemplate {
  id          String        @id @default(cuid())
  type        String        @unique // "GAME_POST_NEW", "GAME_POST_PARTICIPANT", "SYSTEM_NOTICE" 등
  title       String        // 알림 제목 템플릿
  body        String        // 알림 내용 템플릿
  icon        String?       // 알림 아이콘 URL
  actionUrl   String?       // 클릭 시 이동할 URL 템플릿
  isEnabled   Boolean       @default(true)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  
  notifications Notification[]
  
  @@index([type])
}

// 알림 내역
model Notification {
  id           String               @id @default(cuid())
  
  // 알림 기본 정보
  templateId   String?
  template     NotificationTemplate? @relation(fields: [templateId], references: [id], onDelete: SetNull)
  type         String               // 알림 타입
  title        String               // 실제 알림 제목
  body         String               // 실제 알림 내용
  icon         String?              // 알림 아이콘 URL
  actionUrl    String?              // 클릭 시 이동할 URL
  
  // 발송 정보
  senderId     String?              // 발송자 ID (시스템 알림인 경우 null)
  sender       UserProfile?         @relation("SentNotifications", fields: [senderId], references: [userId], onDelete: SetNull)
  
  // 수신 정보 (개별 발송)
  recipientId  String?              // 개별 수신자 ID
  recipient    UserProfile?         @relation("ReceivedNotifications", fields: [recipientId], references: [userId], onDelete: Cascade)
  
  // 그룹 발송 정보
  isGroupSend  Boolean              @default(false) // 그룹 발송 여부
  groupType    String?              // "ALL_USERS", "ROLE_BASED", "GAME_PARTICIPANTS" 등
  groupFilter  Json?                // 그룹 필터 조건 (JSON)
  
  // 관련 엔티티
  gamePostId   String?              // 게임 포스트 관련 알림
  gamePost     GamePost?            @relation("GamePostNotifications", fields: [gamePostId], references: [id], onDelete: Cascade)
  
  // 알림 상태
  status       NotificationStatus   @default(PENDING)
  scheduledAt  DateTime?            // 예약 발송 시간
  sentAt       DateTime?            // 실제 발송 시간
  
  // 메타데이터
  priority     NotificationPriority @default(NORMAL)
  data         Json?                // 추가 데이터 (JSON)
  
  createdAt    DateTime             @default(now())
  updatedAt    DateTime             @updatedAt
  
  // 수신 내역
  receipts     NotificationReceipt[]
  
  @@index([recipientId, createdAt])
  @@index([type, createdAt])
  @@index([status, scheduledAt])
  @@index([gamePostId])
}

// 알림 수신 내역 (개별 사용자별 읽음/안읽음 상태)
model NotificationReceipt {
  id             String       @id @default(cuid())
  notificationId String
  notification   Notification @relation(fields: [notificationId], references: [id], onDelete: Cascade)
  userId         String
  user           UserProfile  @relation("NotificationReceipts", fields: [userId], references: [userId], onDelete: Cascade)
  
  // 수신 상태
  isRead         Boolean      @default(false)
  readAt         DateTime?
  isClicked      Boolean      @default(false)
  clickedAt      DateTime?
  
  // 푸시 발송 상태
  pushSent       Boolean      @default(false)
  pushSentAt     DateTime?
  pushError      String?      // 푸시 발송 실패 시 에러 메시지
  
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  
  @@unique([notificationId, userId])
  @@index([userId, isRead])
  @@index([userId, createdAt])
}

// 알림 상태 enum
enum NotificationStatus {
  PENDING   // 발송 대기
  SENDING   // 발송 중
  SENT      // 발송 완료
  FAILED    // 발송 실패
  CANCELLED // 발송 취소
}

// 알림 우선순위 enum
enum NotificationPriority {
  LOW
  NORMAL
  HIGH
  URGENT
}

// 사용자별 알림 설정
model NotificationSetting {
  id                String      @id @default(cuid())
  userId            String      @unique
  user              UserProfile @relation("UserNotificationSettings", fields: [userId], references: [userId], onDelete: Cascade)
  
  // 방해 금지 시간 설정
  doNotDisturbEnabled Boolean   @default(false)
  doNotDisturbStart   String?   // "22:00" 형식
  doNotDisturbEnd     String?   // "08:00" 형식
  doNotDisturbDays    String[]  @default(["0", "1", "2", "3", "4", "5", "6"]) // 0=일요일, 6=토요일
  
  // 신규 게임메이트 글 알림 설정
  newGamePostEnabled  Boolean   @default(true)
  newGamePostSettings Json?     // 세부 설정을 JSON으로 저장
  
  // 참여중인 모임 알림 설정
  participatingGameEnabled Boolean @default(true)
  participatingGameSettings Json?  // 세부 설정을 JSON으로 저장
  
  // 내가 작성한 모임 알림 설정
  myGamePostEnabled   Boolean   @default(true)
  myGamePostSettings  Json?     // 세부 설정을 JSON으로 저장
  
  // 예비 참여 알림 설정
  waitingListEnabled  Boolean   @default(true)
  
  // 메타데이터
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  
  @@index([userId])
}
