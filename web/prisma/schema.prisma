generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String            @id @default(cuid())
  name               String?
  image              String?
  role               UserRole          @default(NONE)
  createdAt          DateTime          @default(now())
  comments           Comment[]
  gameComments       GameComment[]
  gameParticipations GameParticipant[]
  gamePosts          GamePost[]
  posts              Post[]
  profile            Profile?
}

model Profile {
  id           String   @id @default(cuid())
  userId       String   @unique
  fullName     String
  birthDate    DateTime
  profileImage String   @default("/images/default-profile.png")
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model GlobalPermissionConfig {
  id        Int      @id @default(1)
  json      Json
  updatedAt DateTime @updatedAt
}

model Board {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  description String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  posts       Post[]
}

model BoardPermissionConfig {
  id        Int      @id @default(1)
  json      Json
  updatedAt DateTime @updatedAt
}

model Post {
  id        String    @id @default(cuid())
  title     String
  content   String
  published Boolean   @default(false)
  boardId   String
  authorId  String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  comments  Comment[]
  author    User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  board     Board     @relation(fields: [boardId], references: [id], onDelete: Cascade)
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  postId    String
  authorId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model Game {
  id          String     @id @default(cuid())
  name        String     @unique
  description String?
  iconUrl     String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  aliases     String[]
  posts       GamePost[]
}

model GamePost {
  id           String            @id @default(cuid())
  title        String
  content      String
  gameId       String
  authorId     String
  maxPlayers   Int
  startTime    DateTime
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  status       GamePostStatus    @default(OPEN)
  comments     GameComment[]
  participants GameParticipant[]
  author       User              @relation(fields: [authorId], references: [id], onDelete: Cascade)
  game         Game              @relation(fields: [gameId], references: [id], onDelete: Cascade)
}

model GameParticipant {
  id         String   @id @default(cuid())
  gamePostId String
  userId     String
  isLeader   Boolean  @default(false)
  joinedAt   DateTime @default(now())
  isReserve  Boolean  @default(false)
  gamePost   GamePost @relation(fields: [gamePostId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([gamePostId, userId])
}

model GameComment {
  id         String   @id @default(cuid())
  content    String
  gamePostId String
  authorId   String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  author     User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  gamePost   GamePost @relation(fields: [gamePostId], references: [id], onDelete: Cascade)
}

enum UserRole {
  NONE
  USER
  ADMIN
  SUPER_ADMIN
}

enum GamePostStatus {
  OPEN
  FULL
  COMPLETED
}
