(()=>{let t=self;async function e(t){try{console.log("[custom-worker] 알림 읽음 처리: ".concat(t));let e=await fetch("/api/notifications/receipt?notificationId=".concat(t),{method:"GET",headers:{"Content-Type":"application/json"}});if(!e.ok)return void console.error("[custom-worker] Receipt 조회 실패: ".concat(t),e.status);let o=(await e.json()).receiptId;if(!o)return void console.error("[custom-worker] Receipt ID를 찾을 수 없음: ".concat(t));console.log("[custom-worker] Receipt ID: ".concat(o));let n=await fetch("/api/notifications/".concat(o,"/read"),{method:"POST",headers:{"Content-Type":"application/json"}});n.ok?console.log("[custom-worker] 알림 읽음 처리 완료: ".concat(t," (receiptId: ").concat(o,")")):console.error("[custom-worker] 알림 읽음 처리 실패: ".concat(t),n.status)}catch(e){console.error("[custom-worker] 알림 읽음 처리 오류: ".concat(t),e)}}self.addEventListener("push",function(e){console.log("[custom-worker] Push event received:",e);let o={title:"얼티메이트",body:"새로운 알림이 있습니다.",icon:"/icons/maskable_icon_x192.png",badge:"/icons/maskable_icon_x192.png",tag:"default",data:{url:"/"}};if(e.data)try{let t=e.data.json();console.log("[custom-worker] Push payload:",t),o={...o,...t}}catch(t){console.error("[custom-worker] 푸시 데이터 파싱 실패:",t),o.body=e.data.text()||o.body}let n={body:o.body,icon:o.icon,badge:o.badge,tag:o.tag,data:o.data,actions:[{action:"open",title:"확인하기"},{action:"close",title:"닫기"}],requireInteraction:!0,silent:!1,vibrate:[200,100,200],priority:"high",timestamp:Date.now(),renotify:!0,sticky:!0};e.waitUntil(t.registration.showNotification(o.title,n))}),self.addEventListener("message",function(e){console.log("[custom-worker] Message received:",e.data),"TEST_PUSH"===e.data.type&&t.registration.showNotification(e.data.data.title,{body:e.data.data.body,icon:e.data.data.icon,tag:"test"}),"CHECK_SUBSCRIPTION"===e.data.type&&e.waitUntil(t.registration.pushManager.getSubscription().then(o=>{o&&fetch("/api/push/validate",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({userId:e.data.userId,subscription:o.toJSON()})}).then(o=>{o.ok||(console.log("[custom-worker] 구독이 유효하지 않음, 재구독 필요"),t.clients.matchAll().then(t=>{t.forEach(t=>{t.postMessage({type:"SUBSCRIPTION_INVALID",userId:e.data.userId})})}))}).catch(t=>{console.error("[custom-worker] 구독 검증 실패:",t)})})),"CLEAR_CACHE"===e.data.type&&e.waitUntil(caches.keys().then(function(t){return Promise.all(t.map(function(t){return console.log("[custom-worker] Clearing cache:",t),caches.delete(t)}))}).then(function(){return t.clients.matchAll().then(function(t){t.forEach(function(t){t.postMessage({type:"CACHE_CLEARED"})})})})),"UPDATE_SW"===e.data.type&&e.waitUntil(t.registration.update().then(function(){return console.log("[custom-worker] Service worker updated"),t.clients.matchAll().then(function(t){t.forEach(function(t){t.postMessage({type:"SW_UPDATED"})})})}))}),self.addEventListener("notificationclick",function(t){var o,n;if(console.log("[custom-worker] Notification click received."),t.notification.close(),"close"===t.action)return;let c=(null==(o=t.notification.data)?void 0:o.url)||"/",i=null==(n=t.notification.data)?void 0:n.notificationId;console.log("[custom-worker] 알림 클릭 데이터:",{url:c,notificationId:i}),t.waitUntil(Promise.all([i?e(i):Promise.resolve(),clients.matchAll({type:"window",includeUncontrolled:!0}).then(function(t){for(let e=0;e<t.length;e++){let o=t[e];if(o.url.includes(self.location.origin)&&"focus"in o)return o.navigate(c),o.focus()}if(clients.openWindow)return clients.openWindow(c)})]))}),self.addEventListener("install",function(e){console.log("[custom-worker] Service worker installed"),t.skipWaiting()}),self.addEventListener("sync",function(e){console.log("[custom-worker] Background sync event:",e.tag),"background-sync"===e.tag&&e.waitUntil((console.log("[custom-worker] Performing background sync"),fetch("/api/profile/check",{method:"GET",headers:{"Cache-Control":"no-cache"},cache:"no-store"}).then(t=>{if(401===t.status)return console.log("[custom-worker] 사용자가 인증되지 않음, 백그라운드 동기화 건너뛰기"),null;if(!t.ok)throw Error("Profile check failed: ".concat(t.status));return fetch("/api/notifications/check",{method:"GET",headers:{"Cache-Control":"no-cache"},cache:"no-store"})}).then(t=>{if(!t)return null;if(t.ok)return t.json();throw Error("Background sync failed")}).then(e=>{if(e&&e.hasNewNotifications)return t.registration.showNotification("새 알림",{body:"확인하지 않은 알림이 있습니다.",icon:"/icons/maskable_icon_x192.png",badge:"/icons/maskable_icon_x192.png",tag:"background-sync",requireInteraction:!0,vibrate:[200,100,200],priority:"high"})}).catch(t=>{console.error("[custom-worker] Background sync error:",t)})))}),self.addEventListener("activate",function(e){console.log("[custom-worker] Service worker activated"),e.waitUntil(Promise.all([t.clients.claim(),t.registration.sync.register("background-sync"),caches.keys().then(function(t){return Promise.all(t.map(function(t){return t.includes("dev")||t.includes("old-")?(console.log("[custom-worker] Deleting outdated cache:",t),caches.delete(t)):Promise.resolve()}))})]))})})();